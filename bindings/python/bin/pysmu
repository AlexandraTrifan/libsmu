#!/usr/bin/env python

"""Utility for managing M1K devices.

This script provides similar support to the smu command-line utility mostly to
provide examples for how to leverage the pysmu bindings.
"""

from __future__ import print_function

import argparse
from collections import OrderedDict
from itertools import chain
import os
import signal
from signal import signal, SIG_DFL, SIGINT
import sys
import time

import pysmu


def pprint(s, **kwargs):
    """Prefix output with program name."""
    print('{}: {}'.format(os.path.basename(__file__), s), **kwargs)

def calibration(session, args):
    """Read, write, or reset device calibration."""
    session.add_all()
    if not session.devices:
        pprint('no supported devices are plugged in', file=sys.stderr)
        sys.exit(1)

    dev = session.devices[0]

    if args.display:
        cal_str_map = {
            0: 'Channel A, measure V',
            1: 'Channel A, measure I',
            2: 'Channel A, source V',
            3: 'Channel A, source I',
            4: 'Channel B, measure V',
            5: 'Channel B, measure I',
            6: 'Channel B, source V',
            7: 'Channel B, source I',
        }

        for i, vals in enumerate(dev.calibration):
            print(cal_str_map[i])
            print("  offset: {:.4f}".format(vals[0]))
            print("  p gain: {:.4f}".format(vals[1]))
            print("  n gain: {:.4f}".format(vals[2]))

    else:
        cal_path = None
        if args.write is not None:
            cal_path = args.write
            if not os.path.exists(cal_path):
                pprint("calibration file doesn't exist: {}".format(cal_path))
                sys.exit(1)

        try:
            dev.write_calibration(args.write)
        except pysmu.DeviceError as e:
            pprint(str(e))
            sys.exit(1)
        pprint("successfully updated calibration")


def list_devices(session, args):
    """List all devices in a session."""
    session.add_all()
    for i, dev in enumerate(session.devices):
        print('device {}: {}'.format(i, dev))


def hotplug(session, args):
    """Simple hotplug testing method."""
    def attached(dev):
        print('device attached: {}'.format(dev))

    def detached(dev):
        print('device detached: {}'.format(dev))

    session.add_all()
    session.hotplug_attach(attached)
    session.hotplug_detach(detached)

    pprint('waiting for hotplug events...')
    while True:
        time.sleep(1)

def flash(session, args):
    """Flash a device's firmware."""
    session.add_all()
    try:
        session.flash_firmware(args.firmware_path)
    except pysmu.SessionError as e:
        pprint(str(e))
        sys.exit(1)


if __name__ == '__main__':
    signal(SIGINT, SIG_DFL)

    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    subparsers = parser.add_subparsers(help='available commands')
    parser.add_argument(
        '--version', action='version',
        version='pysmu {}, (libsmu {})'.format(pysmu.__version__, pysmu.libsmu.__version__))

    parser_cal = subparsers.add_parser('cal', help='display, reset, or write calibration data')
    parser_cal.set_defaults(func=calibration)
    parser_cal_mux = parser_cal.add_mutually_exclusive_group()
    parser_cal_mux.add_argument(
        '-d', '--display', action='store_true', dest='display',
        help='display calibration data from a device')
    parser_cal_mux.add_argument(
        '-r', '--reset', action='store_true', dest='reset',
        help='reset calibration data on a device to the defaults')
    parser_cal_mux.add_argument(
        '-w', '--write', metavar='PATH_TO_CAL_FILE', dest='write',
        help='write calibration data to a device')

    parser_list = subparsers.add_parser('list', help='list devices')
    parser_list.set_defaults(func=list_devices)
    parser_list_mux = parser_list.add_mutually_exclusive_group()
    parser_list_mux.add_argument(
        '-a', '--available', action='store_true',
        help='list supported devices currently attached to the system')

    parser_hotplug = subparsers.add_parser('hotplug', help='hotplug devices')
    parser_hotplug.set_defaults(func=hotplug)

    parser_flash = subparsers.add_parser('flash', help='flash firmware image to a device')
    parser_flash.add_argument('firmware_path')
    parser_flash.set_defaults(func=flash)

    args = parser.parse_args()
    # default to displaying calibration data if no subcommand is selected
    if args.func.__name__ == 'calibration':
        if (all(not getattr(args, x) for x in ('display', 'reset', 'write'))):
            args.display = True

    session = pysmu.Session()
    args.func(session, args)

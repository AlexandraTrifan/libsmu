#!/usr/bin/env python2.7

from __future__ import print_function

import argparse
import os
import sys

from pysmu import Smu


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    mux = parser.add_mutually_exclusive_group()
    mux.add_argument(
        '-s', '--show', action='store_true', default=True,
        help='display calibration data from a device')
    mux.add_argument(
        '-r', '--reset', action='store_true',
        help='reset calibration data on a device to the defaults')
    mux.add_argument(
        '-w', '--write',
        dest='cal_file', metavar='PATH_TO_CAL_FILE',
        help='write calibration data to a device')
    options = parser.parse_args()

    x = Smu()
    if not x.devices:
        sys.stderr.write("No supported devices are plugged in.\n")
        sys.exit(1)

    if len(x.devices) > 1:
        sys.stderr.write("Multiple devices are attached, calibration only works on a single device.\n")
        sys.stderr.write("Please detach all devices except the one targeted for calibration.\n")
        sys.exit(1)

    dev = x.devices[0]

    if options.cal_file is not None:
        if not os.path.exists(options.cal_file):
            parser.error("calibration file doesn't exist: %s".format(options.cal_file))
        try:
            dev.write_calibration(options.cal_file)
        except (ValueError, RuntimeError) as e:
            print("calibration failed: {}".format(e.message))
    elif options.reset:
        try:
            dev.write_calibration(None)
        except (ValueError, RuntimeError) as e:
            print("calibration failed: {}".format(e.message))
    elif options.show:
        cal_map = {
            0: 'Channel A, measure V',
            1: 'Channel A, measure I',
            2: 'Channel A, source V',
            3: 'Channel A, source I',
            4: 'Channel B, measure V',
            5: 'Channel B, measure I',
            6: 'Channel B, source V',
            7: 'Channel B, source I',
        }
        for i, vals in enumerate(dev.calibration):
            print(cal_map[i])
            print("  offset: {:.4f}".format(vals[0]))
            print("  p gain: {:.4f}".format(vals[1]))
            print("  n gain: {:.4f}".format(vals[2]))

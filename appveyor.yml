os: Visual Studio 2015
clone_depth: 1

configuration:
  - Release
  - Debug

branches:
  except:
    - gh-pages
    - travis-ci

matrix:
  fast_finish: true

branches:
  except:
    - gh-pages

install:
  # libusb patched for windows hotplug support
  - git clone https://github.com/analogdevicesinc/libusb.git "C:\libusb"
  # install innosetup for creating installers
  - choco install InnoSetup
  - set PATH=%PATH%;"C:\Program Files (x86)\Inno Setup 5"

build_script:
  # build our own libusb version with hotplug support until upstream merges related patches
  - ps: pushd "C:\libusb"
  - git checkout hotplug
  - msbuild msvc\libusb_2015.sln /p:Platform=Win32 /p:Configuration=%CONFIGURATION% /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
  - msbuild msvc\libusb_2015.sln /p:Platform=x64 /p:Configuration=%CONFIGURATION% /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
  - ps: popd

  - mkdir c:\projects\libsmu\32
  - cd c:\projects\libsmu\32
  - cmake -G "Visual Studio 14 2015" \
    -DCMAKE_BUILD_TYPE:STRING=%CONFIGURATION% \
    -DCMAKE_SYSTEM_PREFIX_PATH="C:" \
    -DLIBUSB_LIBRARIES="C:\\libusb\\Win32\\%CONFIGURATION%\\lib\\libusb-1.0.lib" \
    -DLIBUSB_INCLUDE_DIRS="C:\\libusb\\libusb" \
    -DBOOST_ROOT="C:\\Libraries\\boost_1_59_0" \
    -DBOOST_LIBRARYDIR="C:\\Libraries\\boost_1_59_0\\lib32-msvc-14.0" \
    -DBUILD_PYTHON=OFF \
    ..
  - cmake --build . --config %CONFIGURATION%

  - mkdir c:\projects\libsmu\64
  - cd c:\projects\libsmu\64
  - cmake -G "Visual Studio 14 2015 Win64" \
    -DCMAKE_BUILD_TYPE:STRING=%CONFIGURATION% \
    -DCMAKE_SYSTEM_PREFIX_PATH="C:" \
    -DLIBUSB_LIBRARIES="C:\\libusb\\x64\\%CONFIGURATION%\\lib\\libusb-1.0.lib" \
    -DLIBUSB_INCLUDE_DIRS="C:\\libusb\\libusb" \
    -DBOOST_ROOT="C:\\Libraries\\boost_1_59_0" \
    -DBOOST_LIBRARYDIR="C:\\Libraries\\boost_1_59_0\\lib64-msvc-14.0" \
    -DBUILD_PYTHON=OFF \
    ..
  - cmake --build . --config %CONFIGURATION%

  # create libsmu zipfile
  - mkdir c:\libsmu
  - mkdir c:\libsmu\drivers
  - mkdir c:\libsmu\32
  - mkdir c:\libsmu\64
  - mkdir c:\libsmu\include\libsmu
  - copy ..\include\libsmu\*.hpp c:\libsmu\include\libsmu
  - copy ..\dist\m1k-winusb.inf c:\libsmu\drivers
  - copy ..\dist\m1k-winusbx64.cat c:\libsmu\drivers
  - copy ..\dist\m1k-winusbx86.cat c:\libsmu\drivers
  - copy ..\32\src\%CONFIGURATION%\libsmu.* c:\libsmu\32
  - copy ..\64\src\%CONFIGURATION%\libsmu.* c:\libsmu\64
  - copy ..\32\src\cli\%CONFIGURATION%\smu.exe c:\libsmu\32
  - copy ..\64\src\cli\%CONFIGURATION%\smu.exe c:\libsmu\64
  - copy "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\redist\\x86\\Microsoft.VC140.CRT\\msvcp140.dll"; c:\libsmu\32
  - copy "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\redist\\x86\\Microsoft.VC140.CRT\\vcruntime140.dll"; c:\libsmu\32
  - copy "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\redist\\x64\\Microsoft.VC140.CRT\\msvcp140.dll"; c:\libsmu\64
  - copy "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\redist\\x64\\Microsoft.VC140.CRT\\vcruntime140.dll"; c:\libsmu\64
  - 7z a "c:\libsmu.zip" c:\libsmu
  - appveyor PushArtifact c:\libsmu.zip

  ## build 32 bit python bindings
  # add python dirs to PATH
  - set PATH=C:\\Python27;C:\\Python27\\Scripts;%PATH%
  # check we're using the right python version and arch
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # update pip to keep it from complaining
  - "pip install --disable-pip-version-check --user --upgrade pip"
  # wheel needs to be installed in order to build binary wheels for pysmu
  - "pip install wheel"
  # cython is required for generating the extensions
  - "pip install cython"

  # build python dist files
  - ps: pushd C:\projects\libsmu\bindings\python
  - set DISTUTILS_USE_SDK=1
  - set MSSdk=1
  - set PATH=C:\Program Files (x86)\MSBuild\14.0\bin;C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC;%PATH%

  - "vcvarsall.bat x86"
  - "python setup.py build_ext --compiler=msvc -L ../../32/src/%CONFIGURATION% -I C:\\libusb\\libusb"
  - "python setup.py build"
  - "python setup.py bdist_wheel --skip-build"
  - "python setup.py bdist --skip-build --format zip"
  - "python setup.py bdist --skip-build --format msi"

  ## build 64 bit python bindings
  # add python dirs to PATH
  - set PATH=C:\\Python27-x64;C:\\Python27-x64\\Scripts;%PATH%
  # check we're using the right python version and arch
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # update pip to keep it from complaining
  - "pip install --disable-pip-version-check --user --upgrade pip"
  # wheel needs to be installed in order to build binary wheels for pysmu
  - "pip install wheel"
  # cython is required for generating the extensions
  - "pip install cython"

  - "vcvarsall.bat x64"
  - "python setup.py build_ext --compiler=msvc -L ../../64/src/%CONFIGURATION% -I C:\\libusb\\libusb"
  - "python setup.py build"
  - "python setup.py bdist_wheel --skip-build"
  - "python setup.py bdist --skip-build --format zip"
  - "python setup.py bdist --skip-build --format msi"
  - "python setup.py sdist"

  # push all dist files as artifacts
  - ps: Get-ChildItem dist/.\* | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }

  # copy python binding MSIs for installer
  - mkdir c:\libsmu-python
  - ps: Copy-Item dist\pysmu-*amd64-py*.msi c:\libsmu-python\pysmu-amd64.msi
  - ps: Copy-Item dist\pysmu-*win32-py*.msi c:\libsmu-python\pysmu-win32.msi
  - ps: popd

  # create libsmu installers
  - copy C:\projects\libsmu\32\dist\libsmu-x86.iss C:\projects\libsmu\dist\libsmu-x86.iss
  - copy C:\projects\libsmu\32\dist\libsmu-x64.iss C:\projects\libsmu\dist\libsmu-x64.iss
  - iscc C:\projects\libsmu\dist\libsmu-x86.iss
  - iscc C:\projects\libsmu\dist\libsmu-x64.iss
  - appveyor PushArtifact C:\libsmu-setup-x86.exe
  - appveyor PushArtifact C:\libsmu-setup-x64.exe

cache:
  # cache innosetup download
  - C:\Users\appveyor\AppData\Local\Temp\chocolatey
